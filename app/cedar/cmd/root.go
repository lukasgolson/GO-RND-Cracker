/*
Copyright Â© 2023 Lukas G. Olson <lukasolson64@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
*/
package cmd

import (
	"fmt"
	"log"
	"os"
	"runtime"
	"runtime/pprof"
	"time"

	"github.com/spf13/cobra"
)

var memProfileFile *os.File
var cpuProfileFile *os.File

// rootCmd represents the base command when called without any subcommands
var rootCmd = &cobra.Command{
	Use:   "cedar",
	Short: "Find the seed for any given sequence generated by Golang's random number generator.",
	Long: `Cedar is a command-line application that efficiently finds
the best matching seed for  Golang's random number generator. 

Use the 'generate' command to create lookup tables, and the 'search' 
command to identify the seed that best matches the input sequence.`,
	PersistentPreRunE: func(cmd *cobra.Command, args []string) error {

		err := cmd.ParseFlags(args)
		if err != nil {
			return err
		}

		pgo, err := cmd.Flags().GetBool("pgo")

		if err != nil {
			return err
		}

		if pgo {
			println("[Enabling profile-guided optimization (PGO) output]")

			StartCPUProfile()
			StartMemProfile()
		}
		return nil
	},
	PersistentPostRunE: func(cmd *cobra.Command, args []string) error {
		pgo, err := cmd.Flags().GetBool("pgo")
		if err != nil {
			return err
		}

		if pgo {
			pprof.StopCPUProfile()

			err := cpuProfileFile.Close()
			if err != nil {
				return err
			}

			err = memProfileFile.Close()

			if err != nil {
				return err
			}
		}

		return nil
	},
}

func StartCPUProfile() {
	f, err := os.Create("cpu.prof")
	cpuProfileFile = f
	if err != nil {
		log.Fatal("could not create CPU profile: ", err)
	}

	if err := pprof.StartCPUProfile(cpuProfileFile); err != nil {
		log.Fatal("could not start CPU profile: ", err)
	}
}

func StartMemProfile() {
	f, err := os.Create("mem.prof")
	memProfileFile = f
	if err != nil {
		log.Fatal("could not create memory profile: ", err)
	}

	runtime.GC() // get up-to-date statistics
	if err := pprof.WriteHeapProfile(memProfileFile); err != nil {
		log.Fatal("could not write memory profile: ", err)
	}
}

// Execute adds all child commands to the root command and sets flags appropriately.
// This is called by main.main(). It only needs to happen once to the rootCmd.
func Execute() {
	startTime := time.Now()

	err := rootCmd.Execute()
	if err != nil {
		os.Exit(1)
	}

	endTime := time.Now()

	quiet, err := rootCmd.PersistentFlags().GetBool("quiet")
	if err != nil {
		return
	}

	if !quiet {
		fmt.Printf("\nFinished command execution in %s.\n\n", endTime.Sub(startTime))
	}
}

func init() {
	// Here you will define your flags and configuration settings.
	// Cobra supports persistent flags, which, if defined here,
	// will be global for your application.

	// rootCmd.PersistentFlags().StringVar(&cfgFile, "config", "", "config file (default is $HOME/.cedar.yaml)")

	// Cobra also supports local flags, which will only run
	// when this action is called directly.
	rootCmd.Flags().Bool("toggle", false, "Help message for toggle")
	rootCmd.PersistentFlags().IntP("cores", "c", runtime.NumCPU(), "The number of CPU cores to use during processing")
	rootCmd.PersistentFlags().Bool("quiet", false, "Disables all superficial command text")
	rootCmd.PersistentFlags().Bool("pgo", false, "Enables profile-guided optimization (PGO) output")
}
